import json
import math
import time
import logging
from typing import List, Dict, Tuple, Optional
from pathlib import Path

from movement.movement import Movement
from navigation.coordinate_reader import CoordinateReader
from navigation.direction_detector import get_direction
from environment.window_manager import activate_game_window

logger = logging.getLogger(__name__)

class Navigator:
    def __init__(self):
        self.movement = Movement()
        self.coord_reader = CoordinateReader()
        self.current_path: List[Dict[str, int]] = []
        self.current_waypoint_index = 0
        self.waypoint_tolerance = 2.0  # Distance in units to consider waypoint reached
        self.rotation_tolerance = 5.0   # Degrees of acceptable rotation error

    def load_path(self, path_file: str) -> bool:
        """Load a path from a JSON file."""
        try:
            path = Path(path_file)
            if not path.exists():
                logger.error(f"Path file not found: {path_file}")
                return False

            with open(path_file, 'r') as f:
                data = json.load(f)
                self.current_path = data['coordinates']
                self.current_waypoint_index = 0
                logger.info(f"Loaded path with {len(self.current_path)} waypoints")
                return True

        except Exception as e:
            logger.error(f"Error loading path: {e}")
            return False

    def calculate_distance(self, pos1: Dict[str, int], pos2: Dict[str, int]) -> float:
        """Calculate distance between two positions."""
        return math.sqrt(
            (pos2['x'] - pos1['x'])**2 +
            (pos2['y'] - pos1['y'])**2
        )

    def calculate_angle_to_target(self, current_pos: Dict[str, int], 
                                target_pos: Dict[str, int]) -> float:
        """Calculate angle needed to face target position."""
        dx = target_pos['x'] - current_pos['x']
        dy = target_pos['y'] - current_pos['y']
        return (360 + math.degrees(math.atan2(dy, dx))) % 360

    def get_current_position(self) -> Optional[Dict[str, int]]:
        """Get current position from coordinate reader."""
        try:
            coords = self.coord_reader.extract_coordinates()
            if coords:
                # Parse X: num Y: num Z: num format
                parts = coords.split()
                return {
                    'x': int(parts[1]),
                    'y': int(parts[3]),
                    'z': int(parts[5])
                }
            return None
        except Exception as e:
            logger.error(f"Error getting current position: {e}")
            return None

    def follow_path(self) -> bool:
        """Follow the loaded path from current position to end."""
        if not self.current_path:
            logger.error("No path loaded")
            return False

        try:
            activate_game_window()
            logger.info("Starting path following")

            while self.current_waypoint_index < len(self.current_path):
                current_pos = self.get_current_position()
                if not current_pos:
                    logger.error("Failed to get current position")
                    continue

                target = self.current_path[self.current_waypoint_index]
                distance = self.calculate_distance(current_pos, target)

                # Check if we've reached the current waypoint
                if distance <= self.waypoint_tolerance:
                    logger.info(f"Reached waypoint {self.current_waypoint_index + 1}")
                    self.current_waypoint_index += 1
                    self.movement.stop_moving()
                    if self.current_waypoint_index >= len(self.current_path):
                        logger.info("Reached final waypoint")
                        return True
                    continue

                # Calculate and face the correct direction
                target_angle = self.calculate_angle_to_target(current_pos, target)
                current_angle, _ = get_direction()
                angle_diff = ((target_angle - current_angle + 180) % 360) - 180

                # Adjust facing if needed
                if abs(angle_diff) > self.rotation_tolerance:
                    logger.debug(f"Rotating {angle_diff} degrees")
                    direction = 'LEFT' if angle_diff > 0 else 'RIGHT'
                    self.movement.start_rotation(direction)
                    while abs(angle_diff) > self.rotation_tolerance:
                        current_angle, _ = get_direction()
                        angle_diff = ((target_angle - current_angle + 180) % 360) - 180
                        time.sleep(0.05)
                    self.movement.stop_rotation(direction)

                # Move forward
                if not self.movement.is_moving:
                    self.movement.start_forward()

                time.sleep(0.1)

            return True

        except Exception as e:
            logger.error(f"Error following path: {e}")
            return False

        finally:
            self.movement.stop_moving()

if __name__ == "__main__":
    # Test path following
    logging.basicConfig(level=logging.INFO)
    navigator = Navigator()
    
    # Load and follow a test path
    test_path = r"C:\Users\Chris\PycharmProjects\T1-R4NT\paths\path_20250416_012247.json"
    if navigator.load_path(test_path):
        logger.info("Starting test path following")
        navigator.follow_path()
